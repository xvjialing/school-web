swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /article/:
    get:
      tags:
      - article
      description: get Article
      operationId: ArticleController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Article'
        "403":
          description: ""
    post:
      tags:
      - article
      description: create Article
      operationId: ArticleController.Post
      parameters:
      - in: body
        name: body
        description: body for Article content
        required: true
        schema:
          $ref: '#/definitions/models.Article'
      responses:
        "201":
          description: '{int} models.Article'
        "403":
          description: body is empty
  /article/{id}:
    get:
      tags:
      - article
      description: get Article by id
      operationId: ArticleController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Article'
        "403":
          description: :id is empty
    put:
      tags:
      - article
      description: update the Article
      operationId: ArticleController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Article content
        required: true
        schema:
          $ref: '#/definitions/models.Article'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Article'
        "403":
          description: :id is not int
    delete:
      tags:
      - article
      description: delete the Article
      operationId: ArticleController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /file/:
    get:
      tags:
      - file
      description: get File
      operationId: FileController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.File'
        "403":
          description: ""
    post:
      tags:
      - file
      description: create File
      operationId: FileController.Post
      parameters:
      - in: body
        name: body
        description: body for File content
        required: true
        schema:
          $ref: '#/definitions/models.File'
      responses:
        "201":
          description: '{int} models.File'
        "403":
          description: body is empty
  /file/{id}:
    get:
      tags:
      - file
      description: get File by id
      operationId: FileController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.File'
        "403":
          description: :id is empty
    put:
      tags:
      - file
      description: update the File
      operationId: FileController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for File content
        required: true
        schema:
          $ref: '#/definitions/models.File'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.File'
        "403":
          description: :id is not int
    delete:
      tags:
      - file
      description: delete the File
      operationId: FileController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /object/:
    get:
      tags:
      - object
      description: get all objects
      operationId: ObjectController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    post:
      tags:
      - object
      description: create object
      operationId: ObjectController.Create
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: '{string} models.Object.Id'
        "403":
          description: body is empty
  /object/{objectId}:
    get:
      tags:
      - object
      description: find object by objectid
      operationId: ObjectController.Get
      parameters:
      - in: path
        name: objectId
        description: the objectid you want to get
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    put:
      tags:
      - object
      description: update the object
      operationId: ObjectController.Update
      parameters:
      - in: path
        name: objectId
        description: The objectid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: The body
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    delete:
      tags:
      - object
      description: delete the object
      operationId: ObjectController.Delete
      parameters:
      - in: path
        name: objectId
        description: The objectId you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: objectId is empty
  /token/info:
    post:
      tags:
      - token
      description: GetToken
      operationId: TokenController.GetTokenInfo
      parameters:
      - in: formData
        name: access_token
        description: access_token
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/common.Result'
        "403":
          description: ""
  /token/token:
    post:
      tags:
      - token
      description: GetToken
      operationId: TokenController.GetToken
      parameters:
      - in: formData
        name: grant_type
        description: 'grant_type: password,refresh_token ...'
        required: true
        type: string
      - in: formData
        name: username
        description: username
        required: true
        type: string
      - in: formData
        name: password
        description: password
        required: true
        type: string
      - in: formData
        name: scope
        description: read
        required: true
        type: string
      - in: formData
        name: client_id
        description: "12345"
        required: true
        type: string
      - in: formData
        name: client_secret
        description: "123456"
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/common.Result'
        "403":
          description: ""
  /user/:
    get:
      tags:
      - user
      description: get User
      operationId: UserController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: ""
    post:
      tags:
      - user
      description: create User
      operationId: UserController.Post
      parameters:
      - in: body
        name: body
        description: body for User content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "201":
          description: '{int} models.User'
        "403":
          description: body is empty
  /user/{id}:
    get:
      tags:
      - user
      description: get User by id
      operationId: UserController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :id is empty
    put:
      tags:
      - user
      description: update the User
      operationId: UserController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for User content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :id is not int
    delete:
      tags:
      - user
      description: delete the User
      operationId: UserController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
definitions:
  107.0xc000107c50.false:
    title: "false"
    type: object
  common.Result:
    title: Result
    type: object
    properties:
      code:
        type: integer
        format: int64
      data:
        $ref: '#/definitions/107.0xc000107c50.false'
      msg:
        type: string
  models.Article:
    title: Article
    type: object
    properties:
      Author:
        type: string
      Content:
        type: string
      CreateTime:
        type: string
        format: datetime
      Id:
        type: integer
        format: int64
      Subtitle:
        type: string
      Title:
        type: string
      Type:
        type: integer
        format: int64
  models.File:
    title: File
    type: object
    properties:
      CreateTime:
        description: 创建时间
        type: string
        format: datetime
      Id:
        type: integer
        format: int64
      Path:
        description: 路径
        type: string
      Type:
        description: 文件类型
        type: integer
        format: int64
  models.Object:
    title: Object
    type: object
    properties:
      ObjectId:
        type: string
      PlayerName:
        type: string
      Score:
        type: integer
        format: int64
  models.User:
    title: User
    type: object
    properties:
      CreateTime:
        type: string
        format: datetime
      Email:
        type: string
      Id:
        type: integer
        format: int64
      LastLogin:
        type: string
        format: datetime
      Password:
        type: string
      Phone:
        type: string
      Username:
        type: string
tags:
- name: article
  description: |
    ArticleController operations for Article
- name: object
  description: |
    Operations about object
- name: file
  description: |
    FileController operations for File
- name: user
  description: |
    UserController operations for User
